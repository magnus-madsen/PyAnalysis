/// We can use Flix as an ordinary Datalog solver.

/// Declare two predicate symbols.
rel Alloc(var: Str, heap: Str, inMeth: Str)
rel Move(to: Str, from: Str)
rel Load(to: Str, base: Str, fld: Str)
rel Store(base: Str, fld: Str, from: Str)
rel VCall(base: Str, var: Str, invo: Str, inMeth: Str)
rel SCall(var: Str, invo: Str, inMeth: Str)
rel HeapIsFunction(heap: Str, method: Str)
rel PotentialAllocationSite(invo: Str, storeVar: Str, heap: Str, inMeth: Str)
rel HeapIsClass(heap: Str, class: Str)
rel IsClassFor(instanceHeap: Str, classHeap: Str)
rel SelfVar(self: Str, method: Str)

rel FormalArg(meth: Str, n: Str, arg: Str)
rel ActualArg(invo: Str, n: Str, arg: Str)
rel FormalReturn(meth: Str, ret: Str)
rel ActualReturn(invo: Str, var: Str)
rel VarPointsTo(var: Str, heap: Str)
rel CallGraph(invo: Str, meth: Str)
rel FldPointsTo(baseH: Str, fld: Str, heap: Str)
rel InterProcAssign(to: Str, from: Str)
rel Reachable(meth: Str)

// Declare some conStraints.
VarPointsTo(var, heap) :- Reachable(meth), Alloc(var, heap, meth).
VarPointsTo(to, heap) :- Move(to, from), VarPointsTo(from, heap).
FldPointsTo(baseH, fld, heap) :- Store(base, fld, from), VarPointsTo(from, heap),
    VarPointsTo(base, baseH).
VarPointsTo(to, heap) :- Load(to, base, fld), VarPointsTo(base, baseH), FldPointsTo(baseH,fld,heap).
Reachable(toMeth) :- VCall(base, fld, invo, inMeth), Reachable(inMeth), VarPointsTo(base, baseHeap),
    FldPointsTo(baseHeap, fld, fldHeap), HeapIsFunction(fldHeap, toMeth).
CallGraph(invo, toMeth) :- VCall(base, fld, invo, inMeth), Reachable(inMeth), VarPointsTo(base, baseHeap),
    FldPointsTo(baseHeap, fld, fldHeap), HeapIsFunction(fldHeap, toMeth).
VarPointsTo(self, baseHeap):- VCall(base, fld, invo, inMeth), Reachable(inMeth), VarPointsTo(base, baseHeap),
    FldPointsTo(baseHeap, fld, fldHeap), HeapIsFunction(fldHeap, toMeth), SelfVar(self, toMeth).
InterProcAssign(to,from) :- CallGraph(invo, meth), FormalArg(meth, n, to), ActualArg(invo, n, from).
InterProcAssign(to,from) :- CallGraph(invo, meth), FormalReturn(meth, from), ActualReturn(invo, to).
VarPointsTo(to, heap) :- InterProcAssign(to, from), VarPointsTo(from, heap).
Reachable(toMeth) :- SCall(var, invo, inMeth), Reachable(inMeth), VarPointsTo(var, heap), HeapIsFunction(heap, toMeth).
CallGraph(invo, toMeth) :- SCall(var, invo, inMeth), Reachable(inMeth), VarPointsTo(var, heap), HeapIsFunction(heap, toMeth).
Alloc(storeVar, heap, inMeth) :- PotentialAllocationSite(invo, storeVar, heap, inMeth),
    SCall(var, invo, inMeth), VarPointsTo(var, callHeap), HeapIsClass(callHeap, classHeap).
IsClassFor(heap, callHeap) :- PotentialAllocationSite(invo, storeVar, heap, inMeth),
    SCall(var, invo, inMeth), VarPointsTo(var, callHeap), HeapIsClass(callHeap, classHeap).
Alloc(storeVar, heap, inMeth) :- PotentialAllocationSite(invo, storeVar, heap, inMeth),
    VCall(base, var, invo, inMeth), VarPointsTo(var, callHeap), HeapIsClass(callHeap, classHeap).
IsClassFor(heap, callHeap) :- PotentialAllocationSite(invo, storeVar, heap, inMeth),
    VCall(base, var, invo, inMeth), VarPointsTo(var, callHeap), HeapIsClass(callHeap, classHeap).
FldPointsTo(instanceHeap, fld, heap) :- FldPointsTo(classHeap, fld, heap), IsClassFor(instanceHeap, classHeap).

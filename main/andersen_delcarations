/// We can use Flix as an ordinary Datalog solver.

/// Declare two predicate symbols.
rel Alloc(var: Str, heap: Str, inMeth: Str)
rel Move(to: Str, from: Str)
rel Load(to: Str, base: Str, fld: Str)
rel Store(base: Str, fld: Str, from: Str)
rel VCall(base: Str, sig: Str, invo: Str, inMeth: Str)

rel FormalArg(meth: Str, n: Str, arg: Str)
rel ActualArg(invo: Str, n: Str, arg: Str)
rel FormalReturn(meth: Str, ret: Str)
rel ActualReturn(invo: Str, var: Str)
rel HeapType(heap: Str, type: Str)
rel LookUp(type: Str, sig: Str, meth: Str)
rel VarPointsTo(var: Str, heap: Str)
rel CallGraph(invo: Str, meth: Str)
rel FldPointsTo(baseH: Str, fld: Str, heap: Str)
rel InterProcAssign(to: Str, from: Str)
rel Reachable(meth: Str)


// Declare some conStraints.
VarPointsTo(var, heap) :- Reachable(meth), Alloc(var, heap, meth).
VarPointsTo(to, heap) :- Move(to, from), VarPointsTo(from, heap).
FldPointsTo(baseH, fld, heap) :- Store(base, fld, from), VarPointsTo(from, heap),
    VarPointsTo(base, baseH).
VarPointsTo(to, heap) :- Load(to, base, fld), VarPointsTo(base, baseH), FldPointsTo(baseH,fld,heap).
Reachable(toMeth) :- VCall(base, sig, invo, inMeth), Reachable(inMeth), VarPointsTo(base, heap),
    HeapType(heap, heapT), LookUp(heapT, sig, toMeth).
CallGraph(invo, toMeth) :- VCall(base, sig, invo, inMeth), Reachable(inMeth), VarPointsTo(base, heap),
    HeapType(heap, heapT), LookUp(heapT, sig, toMeth).
InterProcAssign(to,from) :- CallGraph(invo, meth), FormalArg(meth, n, to), ActualArg(invo, n, from).
InterProcAssign(to,from) :- CallGraph(invo, meth), FormalReturn(meth, from), ActualReturn(invo, to).
VarPointsTo(to, heap) :- InterProcAssign(to, from), VarPointsTo(from, heap).
